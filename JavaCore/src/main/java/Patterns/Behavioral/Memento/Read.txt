Снимок — это поведенческий паттерн проектирования, который позволяет сохранять 
и восстанавливать прошлые состояния объектов, не раскрывая подробностей их реализации.

---------------------

Отношения с другими паттернами
 Команду и Снимок можно использовать сообща для реализации отмены операций. В этом случае объекты команд
 будут отвечать за выполнение действия над объектом, а снимки будут хранить резервную копию
 состояния этого объекта, сделанную перед самым запуском команды.

 Снимок можно использовать вместе с Итератором, чтобы сохранить текущее состояние обхода структуры
 данных и вернуться к нему в будущем, если потребуется.

 Снимок иногда можно заменить Прототипом, если объект, состояние которого требуется сохранять
 в истории, довольно простой, не имеет активных ссылок на внешние ресурсы либо их можно легко восстановить.

---------------------

Применимость
 Когда вам нужно сохранять мгновенные снимки состояния объекта (или его части), 
 чтобы впоследствии объект можно было восстановить в том же состоянии.

 Паттерн Снимок позволяет создавать любое количество снимков объекта и хранить их, 
 независимо от объекта, с которого делают снимок. Снимки часто используют не только 
 для реализации операции отмены, но и для транзакций, когда состояние объекта нужно 
 «откатить», если операция не удалась.

 Когда прямое получение состояния объекта раскрывает приватные детали его реализации, 
 нарушая инкапсуляцию.

 Паттерн предлагает изготовить снимок самому исходному объекту, 
 поскольку ему доступны все поля, даже приватные.

---------------------

Шаги реализации
 Определите класс создателя, объекты которого должны создавать снимки своего состояния.

 Создайте класс снимка и опишите в нём все те же поля, которые имеются в оригинальном классе-создателе.

 Сделайте объекты снимков неизменяемыми. Они должны получать начальные значения только один раз, через
 свой конструктор.

 Если ваш язык программирования это позволяет, сделайте класс снимка вложенным в класс создателя.
 Если нет, извлеките из класса снимка пустой интерфейс, который будет доступен остальным объектам программы.
 Впоследствии вы можете добавить в этот интерфейс некоторые вспомогательные методы, дающие доступ к метаданным
 снимка, однако прямой доступ к данным создателя должен быть исключён.

 Добавьте в класс создателя метод получения снимков. Создатель должен создавать новые объекты снимков,
 передавая значения своих полей через конструктор.

 Сигнатура метода должна возвращать снимки через ограниченный интерфейс, если он у вас есть.
 Сам класс должен работать с конкретным классом снимка.

 Добавьте в класс создателя метод восстановления из снимка. Что касается привязки к типам,
 руководствуйтесь той же логикой, что и в пункте 4.

 Опекуны, будь то история операций, объекты команд или нечто иное, должны знать о том,
 когда запрашивать снимки у создателя, где их хранить и когда восстанавливать.

 Связь опекунов с создателями можно перенести внутрь снимков. В этом случае каждый снимок будет
 привязан к своему создателю и должен будет сам восстанавливать его состояние. Но это будет работать
 либо если классы снимков вложены в классы создателей, либо если создатели имеют соответствующие
 сеттеры для установки значений своих полей.