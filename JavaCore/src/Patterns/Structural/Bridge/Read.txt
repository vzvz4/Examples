 Применимость
 Когда вы хотите разделить монолитный класс, который содержит несколько различных реализаций
 какой-то функциональности (например, если класс может работать с разными системами баз данных).

 Чем больше класс, тем тяжелее разобраться в его коде, и тем больше это затягивает разработку. Кроме того, изменения,
 вносимые в одну из реализаций, приводят к редактированию всего класса, что может привести к внесению случайных ошибок в код.

 Мост позволяет разделить монолитный класс на несколько отдельных иерархий. После этого вы можете менять их код независимо
 друг от друга. Это упрощает работу над кодом и уменьшает вероятность внесения ошибок.

 Когда класс нужно расширять в двух независимых плоскостях.

 Мост предлагает выделить одну из таких плоскостей в отдельную иерархию классов, храня ссылку на один из её объектов в
 первоначальном классе.

 Когда вы хотите, чтобы реализацию можно было бы изменять во время выполнения программы.

 Мост позволяет заменять реализацию даже во время выполнения программы, так как конкретная реализация не «вшита» в класс
 абстракции.

 Кстати, из-за этого пункта Мост часто путают со Стратегией. Обратите внимание, что у Моста этот пункт стоит на последнем
 месте по значимости, поскольку его главная задача — структурная.

===================================================================
  Преимущества
  Позволяет строить платформо-независимые программы.
  Скрывает лишние или опасные детали реализации от клиентского кода.
  Реализует принцип открытости/закрытости.

  Недостатки
  Усложняет код программы из-за введения дополнительных классов.

===================================================================
  Отношения с другими паттернами
  Мост проектируют загодя, чтобы развивать большие части приложения отдельно друг от друга. Адаптер применяется постфактум,
  чтобы заставить несовместимые классы работать вместе.

  Мост, Стратегия и Состояние (а также слегка и Адаптер) имеют схожие структуры классов — все они построены на принципе
  «композиции», то есть делегирования работы другим объектам. Тем не менее, они отличаются тем, что решают разные проблемы.
  Помните, что паттерны — это не только рецепт построения кода определённым образом, но и описание проблем, которые привели
  к данному решению.

  Абстрактная фабрика может работать совместно с Мостом. Это особенно полезно, если у вас есть абстракции, которые могут
  работать только с некоторыми из реализаций. В этом случае фабрика будет определять типы создаваемых абстракций и реализаций.

  Паттерн Строитель может быть построен в виде Моста: директор будет играть роль абстракции, а строители — реализации.