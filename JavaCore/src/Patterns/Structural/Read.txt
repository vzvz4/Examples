Структурные паттерны

==============
Composite (Компоновщик)

Группирует несколько объектов в древовидную структуру используя один класс.
Позволяет работать с несколькими классами через один объект

Проблема --
Паттерн Компоновщик имеет смысл только тогда, когда основная модель вашей программы может быть структурирована в виде дерева.

Например, есть два объекта: Продукт и Коробка. Коробка может содержать несколько Продуктов и других Коробок поменьше.
Те, в свою очередь, тоже содержат либо Продукты, либо Коробки и так далее.

Теперь предположим, ваши Продукты и Коробки могут быть частью заказов.
Каждый заказ может содержать как простые Продукты без упаковки, так и составные Коробки.
Ваша задача состоит в том, чтобы узнать цену всего заказа.

Структура сложного заказа
Заказ может состоять из различных продуктов, упакованных в собственные коробки.

Если решать задачу в лоб, то вам потребуется открыть все коробки заказа, перебрать все продукты и посчитать их суммарную стоимость.
Но это слишком хлопотно, так как типы коробок и их содержимое могут быть вам неизвестны.
Кроме того, наперёд неизвестно и количество уровней вложенности коробок, поэтому перебрать коробки простым циклом не выйдет.

Решение --
Компоновщик предлагает рассматривать Продукт и Коробку через единый интерфейс с общим методом получения стоимости.

Продукт просто вернёт свою цену. Коробка спросит цену каждого предмета внутри себя и вернёт сумму результатов.
Если одним из внутренних предметов окажется коробка поменьше, она тоже будет перебирать своё содержимое, и так далее, пока не будут посчитаны все составные части.
==============