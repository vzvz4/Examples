
Кеширующий заместитель
Этот пример показывает как с помощью Заместителя можно сделать более эффективной коммуникацию по сети с внешним видеосервисом,
кешируя повторяющиеся запросы.

Заместитель особенно полезен, если у вас нет доступа к коду служебных классов, поведение которых хочется улучшить.
Он позволяет изменить поведение реального объекта, прозрачно для клиентского кода. В этом примере заместитель и сам реальный объект взаимозаменяемы.


Применимость
 Ленивая инициализация (виртуальный прокси). Когда у вас есть тяжёлый объект, грузящий данные из файловой системы или базы данных.

 Вместо того, чтобы грузить данные сразу после старта программы, можно сэкономить ресурсы и создать объект тогда, когда
 он действительно понадобится.

 Защита доступа (защищающий прокси). Когда в программе есть разные типы пользователей, и вам хочется защищать объект от
 неавторизованного доступа. Например, если ваши объекты — это важная часть операционной системы, а пользователи —
 сторонние программы (хорошие или вредоносные).

 Прокси может проверять доступ при каждом вызове и передавать выполнение служебному объекту, если доступ разрешён.

 Локальный запуск сервиса (удалённый прокси). Когда настоящий сервисный объект находится на удалённом сервере.

 В этом случае заместитель транслирует запросы клиента в вызовы по сети в протоколе, понятном удалённому сервису.

 Логирование запросов (логирующий прокси). Когда требуется хранить историю обращений к сервисному объекту.

 Заместитель может сохранять историю обращения клиента к сервисному объекту.

 Кеширование объектов («умная» ссылка). Когда нужно кешировать результаты запросов клиентов и управлять их жизненным циклом.

 Заместитель может подсчитывать количество ссылок на сервисный объект, которые были отданы клиенту и остаются активными.
 Когда все ссылки освобождаются, можно будет освободить и сам сервисный объект (например, закрыть подключение к базе данных).

 Кроме того, Заместитель может отслеживать, не менял ли клиент сервисный объект. Это позволит использовать объекты повторно
 и здóрово экономить ресурсы, особенно если речь идёт о больших прожорливых сервисах.
 ============================================================
 Плюсы
  Позволяет контролировать сервисный объект незаметно для клиента.
  Может работать, даже если сервисный объект ещё не создан.
  Может контролировать жизненный цикл служебного объекта.
 Минусы
 Усложняет код программы из-за введения дополнительных классов.
  Увеличивает время отклика от сервиса.
 ============================================================
Отношения с другими паттернами
Адаптер предоставляет классу альтернативный интерфейс. Декоратор предоставляет расширенный интерфейс. Заместитель
предоставляет тот же интерфейс.

Фасад похож на Заместитель тем, что замещает сложную подсистему и может сам её инициализировать. Но в отличие от Фасада,
Заместитель имеет тот же интерфейс, что его служебный объект, благодаря чему их можно взаимозаменять.

Декоратор и Заместитель имеют схожие структуры, но разные назначения. Они похожи тем, что оба построе
ёртывание Декораторов контролируется клиентом.
 ============================================================
