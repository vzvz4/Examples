Применимость
 Когда ваш код не должен зависеть от классов копируемых объектов.

 Такое часто бывает, если ваш код работает с объектами, поданными извне через какой-то общий интерфейс.
 Вы не можете привязаться к их классам, даже если бы хотели, поскольку их конкретные классы неизвестны.

 Паттерн прототип предоставляет клиенту общий интерфейс для работы со всеми прототипами.
 Клиенту не нужно зависеть от всех классов копируемых объектов, а только от интерфейса клонирования.

 Когда вы имеете уйму подклассов, которые отличаются начальными значениями полей.
 Кто-то мог создать все эти классы, чтобы иметь возможность легко порождать объекты с определённой конфигурацией.

 Паттерн прототип предлагает использовать набор прототипов, вместо создания подклассов для описания популярных
 конфигураций объектов.

 Таким образом, вместо порождения объектов из подклассов, вы будете копировать существующие объекты-прототипы,
 в которых уже настроено внутреннее состояние.
 Это позволит избежать взрывного роста количества классов в программе и уменьшить её сложность.
=========================================================

 Преимущества
 Позволяет клонировать объекты, не привязываясь к их конкретным классам.
 Меньше повторяющегося кода инициализации объектов.
 Ускоряет создание объектов.
 Альтернатива созданию подклассов для конструирования сложных объектов.

 Недостатки
 Сложно клонировать составные объекты, имеющие ссылки на другие
 =========================================================

 Отношения с другими паттернами
 Многие архитектуры начинаются с применения Фабричного метода (более простого и расширяемого через подклассы)
 и эволюционируют в сторону Абстрактной фабрики, Прототипа или Строителя (более гибких, но и более сложных).

 Классы Абстрактной фабрики чаще всего реализуются с помощью Фабричного метода,
 хотя они могут быть построены и на основе Прототипа.

 Если Команду нужно копировать перед вставкой в историю выполненных команд, вам может помочь Прототип.

 Архитектура, построенная на Компоновщиках и Декораторах, часто может быть улучшена за счёт внедрения Прототипа.
 Он позволяет клонировать сложные структуры объектов, а не собирать их заново.

 Прототип не опирается на наследование, но ему нужна сложная операция инициализации. Фабричный метод, наоборот,
 построен на наследовании, но не требует сложной инициализации.

 Снимок иногда можно заменить Прототипом, если объект, состояние которого требуется сохранять в истории,
 довольно простой, не имеет активных ссылок на внешние ресурсы либо их можно легко восстановить.

 Абстрактная фабрика, Строитель и Прототип могут быть реализованы при помощи Одиночки.