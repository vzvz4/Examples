Behavioral pattern visitor
====================================================
Назначение:
Описывает операцию, выполняемую с каждым объектом из некоторой структуры.
Паттерн посетитель позволяет определить новую операцию, не изменяя
классы этих объектов.
Из дополнительной особенности - применение удобно, когда нам нужно реализовать дополнительную логику в группе общих классов,
при этом сами классы изменять возможности нет.
====================================================
Реализация:
Для реализации паттерна необходимо дополнить общий интерфейс для классов которые мы собираемся "посетить"
дополнительным методом в котором будем принимать нашего визитера. -- welcome(Visitor v);

Реализовать интерфейс визитера, в котором определить перегруженые методы,
аргументами которых будут классы доступные для визита. -- visit(ClassA a); --visit(ClassB b);
====================================================
Применимость:
 Когда вам нужно выполнить какую-то операцию над всеми элементами сложной структуры объектов, например, деревом.

 Посетитель позволяет применять одну и ту же операцию к объектам различных классов.

 Когда над объектами сложной структуры объектов надо выполнять некоторые не связанные между собой операции, но вы не хотите «засорять» классы такими операциями.

 Посетитель позволяет извлечь родственные операции из классов, составляющих структуру объектов, поместив их в один класс-посетитель.
 Если структура объектов является общей для нескольких приложений, то паттерн позволит в каждое приложение включить только нужные операции.

 Когда новое поведение имеет смысл только для некоторых классов из существующей иерархии.

 Посетитель позволяет определить поведение только для этих классов, оставив его пустым для всех остальных.